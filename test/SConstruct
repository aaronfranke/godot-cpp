#!/usr/bin/env python
import os, platform

opts = Variables([], ARGUMENTS)

# Define the relative path to the Godot headers.
godot_headers_path = "../godot-headers/"
godot_bindings_path = "../"

# Gets the standard flags CC, CCX, etc.
env = DefaultEnvironment()

# Define our options.
platform_array = ["", "windows", "linuxbsd", "macos", "x11", "linux", "osx"]
opts.Add(EnumVariable("target", "Compilation target", "debug", ["d", "debug", "r", "release"]))
opts.Add(EnumVariable("platform", "Compilation platform", "", platform_array))
opts.Add(EnumVariable("p", "Alias for 'platform'", "", platform_array))
opts.Add(BoolVariable("use_llvm", "Use the LLVM / Clang compiler", "no"))
opts.Add(PathVariable("target_path", "The path where the lib is installed.", "bin/", PathVariable.PathAccept))
opts.Add(PathVariable("target_name", "The library name.", "libgdexample", PathVariable.PathAccept))

# CPU architecture options.
architecture_array = ["", "universal", "x86_32", "x86_64", "arm64", "rv64", "ppc64"]
architecture_aliases = {
    "x64": "x86_64",
    "amd64": "x86_64",
    "arm": "arm64",
    "armv8": "arm64",
    "arm64v8": "arm64",
    "aarch64": "arm64",
    "rv": "rv64",
    "riscv": "rv64",
    "riscv64": "rv64",
    "ppc64le": "ppc64",
}
opts.Add(EnumVariable("arch", "CPU architecture", "", architecture_array, architecture_aliases))

# Updates the environment with the option variables.
opts.Update(env)

# Process platform arguments. Here we use the same names as GDNative.
if env["p"] != "":
    env["platform"] = env["p"]

if env["platform"] == "macos":
    env["platform"] = "osx"
elif env["platform"] in ("x11", "linuxbsd"):
    env["platform"] = "linux"
elif env["platform"] == "bsd":
    env["platform"] = "freebsd"

if env["platform"] == "":
    print("No valid target platform selected.")
    quit()

env_platform = env["platform"]

# Process CPU architecture argument.
if env["arch"] == "":
    # No architecture specified. Default to arm64 if building for Android,
    # universal if building for macOS or iOS, wasm32 if building for web,
    # otherwise default to the host architecture.
    if env_platform in ["osx", "ios"]:
        env["arch"] = "universal"
    elif env_platform == "android":
        env["arch"] = "arm64"
    elif env_platform == "javascript":
        env["arch"] = "wasm32"
    else:
        host_machine = platform.machine().lower()
        if host_machine in architecture_array:
            env["arch"] = host_machine
        elif host_machine in architecture_aliases.keys():
            env["arch"] = architecture_aliases[host_machine]
        elif "86" in host_machine:
            # Catches x86, i386, i486, i586, i686, etc.
            env["arch"] = arch = "x86_32"
        else:
            print("Unsupported CPU architecture: " + host_machine)
            Exit()

env_arch = env["arch"]

# Check our platform specifics.
if env_platform == "osx":
    if not env["use_llvm"]:
        env["use_llvm"] = "yes"
    if env["arch"] == "universal":
        env.Append(LINKFLAGS=["-arch", "x86_64", "-arch", "arm64"])
        env.Append(CCFLAGS=["-arch", "x86_64", "-arch", "arm64"])
    else:
        env.Append(LINKFLAGS=["-arch", env["arch"]])
        env.Append(CCFLAGS=["-arch", env["arch"]])
    if env["target"] in ("debug", "d"):
        env.Append(CCFLAGS=["-g", "-O2", "-std=c++14"])
    else:
        env.Append(CCFLAGS=["-g", "-O3", "-std=c++14"])
elif env_arch == "universal":
    print("The universal architecture is only supported on macOS. Exiting.")
    Exit()

elif env_platform == "linux":
    if env_arch == "x86_64":
        env.Append(CCFLAGS=["-m64", "-march=x86-64"])
        env.Append(LINKFLAGS=["-m64", "-march=x86-64"])
    elif env_arch == "x86_32":
        env.Append(CCFLAGS=["-m32", "-march=i686"])
        env.Append(LINKFLAGS=["-m32", "-march=i686"])
    elif env_arch == "arm64":
        env.Append(CCFLAGS=["-march=armv8-a"])
        env.Append(LINKFLAGS=["-march=armv8-a"])
    elif env_arch == "rv64":
        env.Append(CCFLAGS=["-march=rv64gc"])
        env.Append(LINKFLAGS=["-march=rv64gc"])
    if env["target"] in ("debug", "d"):
        env.Append(CCFLAGS=["-fPIC", "-g3", "-Og"])
    else:
        env.Append(CCFLAGS=["-fPIC", "-g", "-O3"])

elif env_platform == "windows":
    # This makes sure to keep the session environment variables
    # on Windows, so that you can run scons in a VS 2017 prompt
    # and it will find all the required tools.
    env = Environment(ENV=os.environ)
    opts.Update(env)

    env.Append(CCFLAGS=["-DWIN32", "-D_WIN32", "-D_WINDOWS", "-W3", "-GR", "-D_CRT_SECURE_NO_WARNINGS"])
    if env["target"] in ("debug", "d"):
        env.Append(CCFLAGS=["-EHsc", "-D_DEBUG", "-MDd"])
    else:
        env.Append(CCFLAGS=["-O2", "-EHsc", "-DNDEBUG", "-MD"])

if env["use_llvm"] == "yes":
    env["CC"] = "clang"
    env["CXX"] = "clang++"

# We need to re-set arch and platform if we call opts.Update()
env["arch"] = env_arch
env["platform"] = env_platform
env["p"] = env_platform

print("Building for architecture " + env_arch + " on platform " + env_platform)

SConscript(os.path.join(godot_bindings_path, "SConstruct"))


def add_sources(sources, dir):
    for f in os.listdir(dir):
        if f.endswith(".cpp"):
            sources.append(dir + "/" + f)


env.Append(
    CPPPATH=[
        godot_headers_path,
        godot_bindings_path + "/include",
        godot_bindings_path + "/include/gen/",
        godot_bindings_path + "/include/core/",
    ]
)

env.Append(
    LIBS=[
        env.File(
            os.path.join(
                godot_bindings_path,
                "bin",
                "libgodot-cpp.%s.%s.%s%s" % (env_platform, env["target"], env["arch"], env["LIBSUFFIX"]),
            )
        )
    ]
)

env.Append(LIBPATH=[godot_bindings_path + "/bin/"])

sources = []
add_sources(sources, "src")

library = env.SharedLibrary(target=env["target_path"] + "/" + env_platform + "/" + env["target_name"], source=sources)
Default(library)
