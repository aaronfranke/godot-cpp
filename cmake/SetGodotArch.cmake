#
#	If GODOT_ARCH is not defined, set it based on the target operating system and/or host architecture.
#
if (NOT DEFINED GODOT_ARCH)
	if (APPLE)
		if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
			set(GODOT_ARCH "universal")
		elseif (CMAKE_SYSTEM_NAME STREQUAL "iOS")
			set(GODOT_ARCH "arm64")
		else ()
			message(FATAL_ERROR "Unsupported Apple operating system ${CMAKE_SYSTEM_NAME}")
		endif ()
	elseif (ANDROID)
		set(GODOT_ARCH "arm64")
	elseif (CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
		set(GODOT_ARCH "wasm32")
	elseif (WIN32 OR UNIX)
		detect_host_arch(HOST_ARCH)
		set(GODOT_ARCH ${HOST_ARCH})
	else ()
		message(FATAL_ERROR "Unsupported operating system ${CMAKE_SYSTEM_NAME}")
	endif ()
endif ()
set(GODOT_ARCH "${GODOT_ARCH}" CACHE STRING "Target architecture (x86_32, x86_64, arm32, arm64, rv64, wasm32, universal)")


#
#	Convert the custom GODOT_ARCH flag to CMake OS-specific flags.
#
if (CMAKE_SYSTEM_NAME STREQUAL "Android")
	set(GODOT_PLATFORM "android")
	if (GODOT_ARCH STREQUAL "x86_32")
		if (NOT ANDROID_ABI STREQUAL "x86")
			message(FATAL_ERROR "For Godot architecture x86_32 on Android, you must set ANDROID_ABI to x86 on the command line to inform the Android toolchain. Use `-DGODOT_ARCH=x86_32 -DANDROID_ABI=x86`.")
		endif()
	elseif (GODOT_ARCH STREQUAL "x86_64")
		if (NOT ANDROID_ABI STREQUAL "x86_64")
			message(FATAL_ERROR "For Godot architecture x86_64 on Android, you must set ANDROID_ABI to x86_64 on the command line to inform the Android toolchain. Use `-DGODOT_ARCH=x86_64 -DANDROID_ABI=x86_64`.")
		endif()
	elseif (GODOT_ARCH STREQUAL "arm32")
		if (NOT ANDROID_ABI STREQUAL "armeabi-v7a")
			message(FATAL_ERROR "For Godot architecture arm32 on Android, you must set ANDROID_ABI to armeabi-v7a on the command line to inform the Android toolchain. Use `-DGODOT_ARCH=arm32 -DANDROID_ABI=armeabi-v7a`.")
		endif()
	elseif (GODOT_ARCH STREQUAL "arm64")
		if (NOT ANDROID_ABI STREQUAL "arm64-v8a")
			message(FATAL_ERROR "For Godot architecture arm64 on Android, you must set ANDROID_ABI to arm64-v8a on the command line to inform the Android toolchain. Use `-DGODOT_ARCH=arm64 -DANDROID_ABI=arm64-v8a`.")
		endif()
	else ()
		message(FATAL_ERROR "Unsupported architecture ${GODOT_ARCH} for Android")
	endif ()
elseif (CMAKE_SYSTEM_NAME STREQUAL "Emscripten")
	set(GODOT_PLATFORM "web")
	if (GODOT_ARCH STREQUAL "wasm32")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -s WASM=1" CACHE STRING "Build for wasm32 architecture on WebAssembly" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -s WASM=1" CACHE STRING "Build for wasm32 architecture on WebAssembly" FORCE)
	else ()
		message(FATAL_ERROR "Unsupported architecture ${GODOT_ARCH} for WebAssembly")
	endif ()
elseif (CMAKE_SYSTEM_NAME STREQUAL "Linux")
	set(GODOT_PLATFORM "linux")
	if (GODOT_ARCH STREQUAL "x86_32")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m32 -march=i686" CACHE STRING "Build for x86_32 architecture on Linux" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m32 -march=i686" CACHE STRING "Build for x86_32 architecture on Linux" FORCE)
	elseif (GODOT_ARCH STREQUAL "x86_64")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -m64 -march=x86-64" CACHE STRING "Build for x86_64 architecture on Linux" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -march=x86-64" CACHE STRING "Build for x86_64 architecture on Linux" FORCE)
	elseif (GODOT_ARCH STREQUAL "arm32")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv7-a" CACHE STRING "Build for arm32 architecture on Linux" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv7-a" CACHE STRING "Build for arm32 architecture on Linux" FORCE)
	elseif (GODOT_ARCH STREQUAL "arm64")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=armv8-a" CACHE STRING "Build for arm64 architecture on Linux" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=armv8-a" CACHE STRING "Build for arm64 architecture on Linux" FORCE)
	elseif (GODOT_ARCH STREQUAL "rv64")
		set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=rv64gc" CACHE STRING "Build for rv64 architecture on Linux" FORCE)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=rv64gc" CACHE STRING "Build for rv64 architecture on Linux" FORCE)
	else ()
		message(FATAL_ERROR "Unsupported architecture ${GODOT_ARCH} for Linux")
	endif ()
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
	set(GODOT_PLATFORM "windows")
	if (GODOT_ARCH STREQUAL "x86_32")
		set(CMAKE_GENERATOR_PLATFORM "Win32" CACHE STRING "Build for x86_32 architecture on Windows" FORCE)
	elseif (GODOT_ARCH STREQUAL "x86_64")
		set(CMAKE_GENERATOR_PLATFORM "x64" CACHE STRING "Build for x86_64 architecture on Windows" FORCE)
	elseif (GODOT_ARCH STREQUAL "arm64")
		set(CMAKE_GENERATOR_PLATFORM "ARM64" CACHE STRING "Build for arm64 architecture on Windows" FORCE)
	else ()
		message(FATAL_ERROR "Unsupported architecture ${GODOT_ARCH} for Windows")
	endif ()
elseif (APPLE)
	if (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
		set(GODOT_PLATFORM "macos")
	elseif (CMAKE_SYSTEM_NAME STREQUAL "iOS")
		set(GODOT_PLATFORM "ios")
	else ()
		message(FATAL_ERROR "Unsupported Apple operating system ${CMAKE_SYSTEM_NAME}")
	endif ()
	# Both macOS and iOS use the same CMAKE_OSX_ARCHITECTURES variable (even though iOS is very much not OSX).
	if (GODOT_ARCH STREQUAL "x86_64")
		set(CMAKE_OSX_ARCHITECTURES "x86_64" CACHE STRING "Build only x86_64 architecture for macOS or iOS" FORCE)
	elseif (GODOT_ARCH STREQUAL "arm64")
		set(CMAKE_OSX_ARCHITECTURES "arm64" CACHE STRING "Build only arm64 architecture for macOS or iOS" FORCE)
	elseif (GODOT_ARCH STREQUAL "universal")
		set(CMAKE_OSX_ARCHITECTURES "x86_64;arm64" CACHE STRING "Build universal architectures for macOS or iOS" FORCE)
	else ()
		message(FATAL_ERROR "Unsupported architecture ${GODOT_ARCH} for macOS or iOS")
	endif ()
else ()
	message(FATAL_ERROR "Unsupported operating system ${CMAKE_SYSTEM_NAME}")
endif ()
